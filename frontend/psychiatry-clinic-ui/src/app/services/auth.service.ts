import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable, throwError, of } from 'rxjs';
import { tap, catchError, map } from 'rxjs/operators';
import { environment } from '@environments/environment';

interface RegisterResponse {
  token?: string;
  message?: string;
  email?: string;
  userId?: string;
}

interface LoginResponse {
  token: string;
  userId: string;
  role: string;
}

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private apiUrl = `${environment.apiUrl}/auth`;

  constructor(private http: HttpClient) {}

  // Kayƒ±t i≈ülemi
  register(registerData: any): Observable<RegisterResponse> {
    const endpoint = `${this.apiUrl}/register`;
    
    const headers = new HttpHeaders()
      .set('Content-Type', 'application/json')
      .set('Accept', 'application/json');

    return this.http.post<RegisterResponse>(endpoint, registerData, { 
      headers
    }).pipe(
      tap(response => {
        console.log('‚úÖ Register ba≈üarƒ±lƒ±!');
        
        // Kayƒ±t olan kullanƒ±cƒ±nƒ±n email'ini kullan
        const userEmail = registerData.email;
        console.log('üìß Mail g√∂nderimi ba≈ülƒ±yor:', userEmail);
        
        // Mail g√∂nderimi i√ßin yeni endpoint'e istek at
        if (userEmail) {
          // Burada return ekleyerek Observable'ƒ± zincirleyelim
          return this.sendWelcomeEmail(userEmail).pipe(
            tap(
              () => console.log('üìß Ho≈ügeldiniz maili g√∂nderildi'),
              error => {
                console.error('üìß Mail g√∂nderimi ba≈üarƒ±sƒ±z:', error);
                // Mail hatasƒ± olsa bile register i≈ülemini ba≈üarƒ±lƒ± sayalƒ±m
                return of(response);
              }
            )
          );
        }
        return of(response);
      }),
      catchError(error => {
        console.error('‚ùå Register hatasƒ±!');
        console.error('üîç Hata detayƒ±:', error);
        return throwError(() => error);
      })
    );
  }

  // Ho≈ügeldiniz maili g√∂nderme metodu
  private sendWelcomeEmail(email: string): Observable<any> {
    const endpoint = `${this.apiUrl}/send-welcome-email`;
    return this.http.post(endpoint, { email }, {
      headers: new HttpHeaders().set('Content-Type', 'application/json')
    });
  }

  // Giri≈ü i≈ülemi
  login(email: string, password: string): Observable<LoginResponse> {
    const endpoint = `${this.apiUrl}/login`;
    
    return this.http.post<LoginResponse>(endpoint, { email, password }).pipe(
      tap(response => {
        if (response.token) {
          localStorage.setItem('token', response.token);
          localStorage.setItem('userId', response.userId);
          localStorage.setItem('role', response.role);
        }
      }),
      catchError(error => {
        // 401 hatasƒ± (yetkisiz eri≈üim) durumunda
        if (error.status === 401) {
          return throwError(() => 'Kullanƒ±cƒ± adƒ± veya ≈üifre yanlƒ±≈ü');
        }
        // Diƒüer t√ºm hata durumlarƒ± i√ßin
        return throwError(() => 'Giri≈ü sƒ±rasƒ±nda bir hata olu≈ütu');
      })
    );
  }

  // Google ile giri≈ü
  async signInWithGoogle(): Promise<any> {
    // Google sign-in implementasyonu gelecek
    throw new Error('Google ile giri≈ü hen√ºz implement edilmedi');
  }

  // √áƒ±kƒ±≈ü i≈ülemi
  logout(): void {
    localStorage.removeItem('token');
    localStorage.removeItem('userId');
    localStorage.removeItem('role');
  }

  // Token kontrol√º
  isLoggedIn(): boolean {
    return !!localStorage.getItem('token');
  }

  // Kullanƒ±cƒ± rol√º kontrol√º
  getUserRole(): string | null {
    return localStorage.getItem('role');
  }

  // Token'ƒ± al
  getToken(): string | null {
    return localStorage.getItem('token');
  }

  // Kullanƒ±cƒ± ID'sini al
  getUserId(): string | null {
    return localStorage.getItem('userId');
  }
} 